generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Listing {
  id            String  @id @default(cuid())
  title         String  @unique
  website       String
  category      String
  size          String
  city          String
  neighborhood  String?
  latitude      Float?
  longitude     Float?
  twit          String?
  inst          String?
  linkATitle    String?
  linkAURL      String?
  linkBTitle    String?
  linkBURL      String?
  pullquote     String?
  episodePromo  String?
  episodePerson String?
  episodeURL    String?
  colorA        String?
  published     Boolean
  description   String?
  colorB        String?
  tags          Tag[]   @relation("TagToListing")
}

model Tag {
  id       String    @id @default(cuid())
  name     String    @unique
  listings Listing[] @relation("TagToListing")
}

model HealthCheck {
  id              String    @id @default(cuid())
  listingId       String
  checkedAt       DateTime  @default(now())
  status          String    // 'up', 'down', 'redirect', 'error', 'content_error'
  statusCode      Int?
  responseTimeMs  Int?
  redirectUrl     String?
  finalUrl        String?
  errorMessage    String?
  errorType       String?   // 'timeout', 'dns', 'connection_refused', 'ssl', 'unknown'
  contentType     String?
  contentIssue    String?
  redirectChain   Json?     // Store the redirect chain as JSON
  isSecure        Boolean?  // Whether the site uses HTTPS

  @@index([listingId])
  @@index([checkedAt])
}